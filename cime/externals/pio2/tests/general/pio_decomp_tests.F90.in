PIO_TF_AUTO_TEST_SUB_BEGIN init_decomp_1d_get_loc_sz
  implicit none
  integer, parameter :: VEC_LOCAL_SZ = 7
  integer, dimension(:), allocatable :: data_types
  character(len=PIO_TF_MAX_STR_LEN), dimension(:), allocatable :: data_type_descs
  type(io_desc_t) :: iodesc
  integer, dimension(VEC_LOCAL_SZ) :: compdof, compdof_rel_disps
  integer, dimension(1) :: dims
  integer :: i, ntypes, lsz

  do i=1,VEC_LOCAL_SZ
    compdof_rel_disps(i) = i
  end do
  dims(1) = VEC_LOCAL_SZ * pio_tf_world_sz_
  compdof = VEC_LOCAL_SZ * pio_tf_world_rank_ + compdof_rel_disps

  call PIO_TF_Get_data_types(data_types, data_type_descs, ntypes)
  do i=1,ntypes
    PIO_TF_LOG(0,*) "Testing type : ", data_type_descs(i)
    call PIO_initdecomp(pio_tf_iosystem_, data_types(i), dims, compdof, iodesc)
    lsz = PIO_get_local_array_size(iodesc)
    PIO_TF_PASSERT(lsz == VEC_LOCAL_SZ, "Checking the local array size")
    call PIO_freedecomp(pio_tf_iosystem_, iodesc)
  end do

  if(allocated(data_types)) then
    deallocate(data_types)
    deallocate(data_type_descs)
  end if
PIO_TF_AUTO_TEST_SUB_END init_decomp_1d_get_loc_sz

PIO_TF_TEMPLATE<PIO_TF_PREDEF_TYPENAME PIO_TF_DATA_TYPE, PIO_TF_PREDEF_TYPENAME PIO_TF_FC_DATA_TYPE>
PIO_TF_AUTO_TEST_SUB_BEGIN nc_write_1d_darray
  implicit none
  integer, parameter :: VEC_LOCAL_SZ = 7
  type(var_desc_t)  :: pio_var
  type(file_desc_t) :: pio_file
  character(len=PIO_TF_MAX_STR_LEN) :: filename
  type(io_desc_t) :: iodesc
  integer, dimension(VEC_LOCAL_SZ) :: compdof, compdof_rel_disps
  PIO_TF_FC_DATA_TYPE, dimension(VEC_LOCAL_SZ) :: buf
  integer, dimension(1) :: dims
  integer :: pio_dim
  integer :: i, ierr, lsz
  ! iotypes = valid io types
  integer, dimension(:), allocatable :: iotypes
  character(len=PIO_TF_MAX_STR_LEN), dimension(:), allocatable :: iotype_descs
  integer :: num_iotypes

  do i=1,VEC_LOCAL_SZ
    compdof_rel_disps(i) = i
  end do
  dims(1) = VEC_LOCAL_SZ * pio_tf_world_sz_
  compdof = VEC_LOCAL_SZ * pio_tf_world_rank_ + compdof_rel_disps
  buf = pio_tf_world_rank_;

  call PIO_initdecomp(pio_tf_iosystem_, PIO_TF_DATA_TYPE, dims, compdof, iodesc)

  num_iotypes = 0
  call PIO_TF_Get_nc_iotypes(iotypes, iotype_descs, num_iotypes)
  filename = "test_pio_decomp_simple_tests.testfile"
  do i=1,num_iotypes
    PIO_TF_LOG(0,*) "Testing : PIO_TF_DATA_TYPE : ", iotype_descs(i)
    ierr = PIO_createfile(pio_tf_iosystem_, pio_file, iotypes(i), filename, PIO_CLOBBER) 
    PIO_TF_CHECK_ERR(ierr, "Could not create file " // trim(filename))

    ierr = PIO_def_dim(pio_file, 'PIO_TF_test_dim', dims(1), pio_dim)
    PIO_TF_CHECK_ERR(ierr, "Failed to define a dim : " // trim(filename))

    ierr = PIO_def_var(pio_file, 'PIO_TF_test_var', PIO_TF_DATA_TYPE, (/pio_dim/), pio_var)
    PIO_TF_CHECK_ERR(ierr, "Failed to define a var : " // trim(filename))

    ierr = PIO_enddef(pio_file)
    PIO_TF_CHECK_ERR(ierr, "Failed to end redef mode : " // trim(filename))

    ! Write the variable out
    call PIO_write_darray(pio_file, pio_var, iodesc, buf, ierr)
    PIO_TF_CHECK_ERR(ierr, "Failed to write darray : " // trim(filename))

    ! FIXME: Verify the written output

    call PIO_closefile(pio_file)
    call PIO_deletefile(pio_tf_iosystem_, filename);
  end do
  if(allocated(iotypes)) then
    deallocate(iotypes)
    deallocate(iotype_descs)
  end if

  call PIO_freedecomp(pio_tf_iosystem_, iodesc)
PIO_TF_AUTO_TEST_SUB_END nc_write_1d_darray

PIO_TF_TEMPLATE<PIO_TF_PREDEF_TYPENAME PIO_TF_DATA_TYPE, PIO_TF_PREDEF_TYPENAME PIO_TF_FC_DATA_TYPE>
PIO_TF_AUTO_TEST_SUB_BEGIN nc_write_1d_reuse_decomp
  implicit none
  integer, parameter :: VEC_LOCAL_SZ = 7
  type(var_desc_t)  :: pio_var1_file1, pio_var2_file1, pio_var1_file2
  type(file_desc_t) :: pio_file1, pio_file2
  character(len=PIO_TF_MAX_STR_LEN) :: filename1, filename2
  type(io_desc_t) :: iodesc
  integer, dimension(VEC_LOCAL_SZ) :: compdof, compdof_rel_disps
  PIO_TF_FC_DATA_TYPE, dimension(VEC_LOCAL_SZ) :: buf
  integer, dimension(1) :: dims
  integer :: pio_dim_file1, pio_dim_file2
  integer :: i, ierr, lsz
  ! iotypes = valid io types
  integer, dimension(:), allocatable :: iotypes
  character(len=PIO_TF_MAX_STR_LEN), dimension(:), allocatable :: iotype_descs
  integer :: num_iotypes

  do i=1,VEC_LOCAL_SZ
    compdof_rel_disps(i) = i
  end do
  dims(1) = VEC_LOCAL_SZ * pio_tf_world_sz_
  compdof = VEC_LOCAL_SZ * pio_tf_world_rank_ + compdof_rel_disps
  buf = pio_tf_world_rank_;

  call PIO_initdecomp(pio_tf_iosystem_, PIO_TF_DATA_TYPE, dims, compdof, iodesc)

  num_iotypes = 0
  call PIO_TF_Get_nc_iotypes(iotypes, iotype_descs, num_iotypes)
  filename1 = "test_pio_decomp_simple_tests.testfile1"
  filename2 = "test_pio_decomp_simple_tests.testfile2"
  do i=1,num_iotypes
    PIO_TF_LOG(0,*) "Testing : PIO_TF_DATA_TYPE : ", iotype_descs(i)
    ierr = PIO_createfile(pio_tf_iosystem_, pio_file1, iotypes(i),&
                            filename1, PIO_CLOBBER) 
    PIO_TF_CHECK_ERR(ierr, "Could not create file " // trim(filename1))

    ierr = PIO_createfile(pio_tf_iosystem_, pio_file2, iotypes(i),&
                            filename2, PIO_CLOBBER) 
    PIO_TF_CHECK_ERR(ierr, "Could not create file " // trim(filename1))

    ierr = PIO_def_dim(pio_file1, 'PIO_TF_test_dim', dims(1), pio_dim_file1)
    PIO_TF_CHECK_ERR(ierr, "Failed to define a dim : " // trim(filename1))

    ierr = PIO_def_dim(pio_file2, 'PIO_TF_test_dim', dims(1), pio_dim_file2)
    PIO_TF_CHECK_ERR(ierr, "Failed to define a dim : " // trim(filename2))

    ierr = PIO_def_var(pio_file1, 'PIO_TF_test_var1', PIO_TF_DATA_TYPE,&
                          (/pio_dim_file1/), pio_var1_file1)
    PIO_TF_CHECK_ERR(ierr, "Failed to define first var : " // trim(filename1))

    ierr = PIO_def_var(pio_file1, 'PIO_TF_test_var2', PIO_TF_DATA_TYPE,&
                          (/pio_dim_file1/), pio_var2_file1)
    PIO_TF_CHECK_ERR(ierr, "Failed to define second var : " // trim(filename1))

    ierr = PIO_def_var(pio_file2, 'PIO_TF_test_var1', PIO_TF_DATA_TYPE,&
                          (/pio_dim_file2/), pio_var1_file2)
    PIO_TF_CHECK_ERR(ierr, "Failed to define first var : " // trim(filename2))

    ierr = PIO_enddef(pio_file1)
    PIO_TF_CHECK_ERR(ierr, "Failed to end redef mode : " // trim(filename1))

    ierr = PIO_enddef(pio_file2)
    PIO_TF_CHECK_ERR(ierr, "Failed to end redef mode : " // trim(filename2))

    ! Write the variables - file1
    call PIO_write_darray(pio_file1, pio_var1_file1, iodesc, buf, ierr)
    PIO_TF_CHECK_ERR(ierr, "Failed to write first darray : " // trim(filename1))

    call PIO_write_darray(pio_file1, pio_var2_file1, iodesc, buf, ierr)
    PIO_TF_CHECK_ERR(ierr, "Failed to write second darray : " // trim(filename1))

    ! Write the variables - file2
    call PIO_write_darray(pio_file2, pio_var1_file2, iodesc, buf, ierr)
    PIO_TF_CHECK_ERR(ierr, "Failed to write first darray : " // trim(filename2))

    ! FIXME: Verify the written output

    call PIO_closefile(pio_file1)
    call PIO_closefile(pio_file2)
    call PIO_deletefile(pio_tf_iosystem_, filename1);
    call PIO_deletefile(pio_tf_iosystem_, filename2);
  end do
  if(allocated(iotypes)) then
    deallocate(iotypes)
    deallocate(iotype_descs)
  end if

  call PIO_freedecomp(pio_tf_iosystem_, iodesc)
PIO_TF_AUTO_TEST_SUB_END nc_write_1d_reuse_decomp
